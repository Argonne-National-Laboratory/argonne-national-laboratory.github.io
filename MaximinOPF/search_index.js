var documenterSearchIndex = {"docs":
[{"location":"example/#","page":"Examples","title":"Examples","text":"#Examples for the MaximinOPF.jl","category":"page"},{"location":"example/#Solve-MinMax-Dual-problem-1","page":"Examples","title":"Solve MinMax Dual problem","text":"","category":"section"},{"location":"example/#","page":"Examples","title":"Examples","text":"Description of the example The code description:","category":"page"},{"location":"example/#ECP-1","page":"Examples","title":"ECP","text":"","category":"section"},{"location":"example/#","page":"Examples","title":"Examples","text":"Description of the example The code description:","category":"page"},{"location":"gettingstarted/#Getting-Started-1","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Installation\nBuilding a Model JuMP Model\nSolving\nMathematical Options","category":"page"},{"location":"gettingstarted/#Installation-1","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"MaximinOPF.jl is availalbe to use as a local package with the Julia package manager. ","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Download the repository\nInstall and test pacakge","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"(Shell)> cd <proj_root>\n(Shell)> julia\n(Julia)> ]\n(v1.3) pkg> activate .\n(MaximinOPF) pkg> test\n... testing ...\nTesting MaximinOPF tests passed\n(MaximinOPF) pkg>","category":"page"},{"location":"gettingstarted/#Using-a-Package-1","page":"Getting Started","title":"Using a Package","text":"","category":"section"},{"location":"gettingstarted/#Module-Importing-1","page":"Getting Started","title":"Module Importing","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"MaximinOPF.jl contains MaximinOPF module to build a JuMP model. The module provides two key APIs to solve the mathematical problems. The package uses PowerModels.jl to parse the standard power system input files and to define the mathematical form of the model. ","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"using MaximinOPF\nusing PowerModels","category":"page"},{"location":"gettingstarted/#Input-Preparing-1","page":"Getting Started","title":"Input Preparing","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"In this example, we will use IEEE 9-BUS power system as a sample input. The input files are available on the data folder. The first step is that preparing the inputs for the MaximinOPF module with the PowerModels.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"pm_data = PowerModels.parse_file(./data/case9.m)\npowerform = SOCWRConicPowerModel","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"The pm_data is the ParsedPowerSystemModel object that describes the input power system. The powerform indicates the mathematical form of the model.","category":"page"},{"location":"gettingstarted/#Model-Building-1","page":"Getting Started","title":"Model Building","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"The building process is simply operated by calling the API functions in MaximinOPF module. In this example, we will call the MaximinOPFModel API to build a model.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"maxmin_model = MaximinOPF.MaximinOPFModel(pm_data, powerform)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"The output of the function is a JuMP model that includes the power flow, feasibility, minmax, dualization problems in SOCWRConic form. ","category":"page"},{"location":"gettingstarted/#Solving-1","page":"Getting Started","title":"Solving","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"In this example, we will use Mosek.jl as a solver interface. The solving code follows the used interfaces.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"using Mosek\nusing MosekTools\n\nset_optimizer(maxmin_model,Mosek.Optimizer)  \nresult = @elapsed JuMP.optimize!(maxmin_model)\n#Print Result   \nstatus=JuMP.termination_status(maxmin_model)\nprintln(\"Time taken to solve is: \", result, \" with status \",status,\".\")","category":"page"},{"location":"gettingstarted/#Mathematical-Options-1","page":"Getting Started","title":"Mathematical Options","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"The MaximinOPF.jl uses PowerModels.jl to build power system variables and constraints in different form of the optimization problem.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"TODO: Description of available PowerModel Options","category":"page"},{"location":"mathematicalconcept/#Mathematical-Concept-1","page":"Mathematical Concept","title":"Mathematical Concept","text":"","category":"section"},{"location":"mathematicalconcept/#Feasibility-Problem-1","page":"Mathematical Concept","title":"Feasibility Problem","text":"","category":"section"},{"location":"mathematicalconcept/#MinMax-Problem-1","page":"Mathematical Concept","title":"MinMax Problem","text":"","category":"section"},{"location":"mathematicalconcept/#Maxmin-Problem-1","page":"Mathematical Concept","title":"Maxmin Problem","text":"","category":"section"},{"location":"#MaximinOPF.jl-1","page":"Home","title":"MaximinOPF.jl","text":"","category":"section"},{"location":"#Overview-1","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"MaximinOPF.jl is a Julia/JuMP package for modeling N-k contingency analysis in power systems, which creates a maxmin model where an attacker seeks to maximize system infeasibility subject to 1) a given attack budget of K network assets (typically lines and transformers) and 2) the assumed optimal defense response of the power system operator. The power flow system is modeled according to various formulations based on relaxations or approxiations of the equations governing line/transformer power flow, which include the SDP and SOCP relaxations, and the DC or other linear approximation of the power flow equations.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The simplest way to install the MaximinOPF.jl is below:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Shell)> cd <proj_root>\n(Shell)> julia\n(Julia)> ]\n(v1.3) pkg> activate .\n(MaximinOPF.jl) pkg> build\n(MaximinOPF.jl) pkg> test","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Detailed information on installation, model building, optimization support and other options is available at Getting Started. ","category":"page"},{"location":"#Links-1","page":"Home","title":"Links","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Code Repository: MaximinOPF.jl\nUser Guide: Getting Started\nAPI Documentation: API Doc\nMathematical Concept: Mathematical Concept","category":"page"},{"location":"#Team-Members-1","page":"Home","title":"Team Members","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Kibaek Kim: PI, Argonne National Laboratory, USA\nBrian Dandurand: Argonne National Laboratory, USA\nMichel Schanen: Argonne National Laboratory, USA\nSang-il Yim: Argonne National Laboratory, USA","category":"page"},{"location":"#Acknowledgement-1","page":"Home","title":"Acknowledgement","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This material is based upon work supported by the U.S. Department of Energy, Office of Electricity Delivery and Energy Reliability, Advanced Grid Research and Development, under contract number DE-AC02-06CH11357.","category":"page"},{"location":"#License-1","page":"Home","title":"License","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"In preparation","category":"page"},{"location":"API/#MaximinOPF.jl-APIs-1","page":"API Document","title":"MaximinOPF.jl APIs","text":"","category":"section"},{"location":"API/#","page":"API Document","title":"API Document","text":"MaximinOPF.jl provides two key APIs to build a JuMP model based on the PowerModels.jl's ParsedPowerSystemModel.","category":"page"},{"location":"API/#MaximinOPFModel(ParsedPowerSystemModel,-MathOption)-1","page":"API Document","title":"MaximinOPFModel(ParsedPowerSystemModel, MathOption)","text":"","category":"section"},{"location":"API/#","page":"API Document","title":"API Document","text":"This API build a JuMP model for the maximin problem that contains minmax and dualization problems. The code examples:","category":"page"},{"location":"API/#","page":"API Document","title":"API Document","text":"using MaximinOPF\nusing PowerModels\n\npm_data = PowerModels.parse_file(./data/case9.m)\npowerform = SOCWRConicPowerModel\n\nmaxmin_model = MaximinOPF.MaximinOPFModel(pm_data, powerform)","category":"page"},{"location":"API/#","page":"API Document","title":"API Document","text":"The sample code uses IEEE 9-bus test system as a input power system. PowerModels parses the system and builds a ParsedPowerSystemModel object. The SOCWRConicPowerModel, which is defined in the PowerModels, option indicates the mathematical form of the model. The MaximinOPFModel function build a JuMP model that can be solved by mathmatical solvers.","category":"page"},{"location":"API/#MinimaxOPFModel(ParsedPowerSystemModel,-MathOption)-1","page":"API Document","title":"MinimaxOPFModel(ParsedPowerSystemModel, MathOption)","text":"","category":"section"},{"location":"API/#","page":"API Document","title":"API Document","text":"This API build a power system model for the minmax problem that contains feasibility problem The code examples:","category":"page"},{"location":"API/#","page":"API Document","title":"API Document","text":"using MaximinOPF\nusing PowerModels\n\npm_data = PowerModels.parse_file(./data/case9.m)\npowerform = SOCWRConicPowerModel\n\nmaxmin_model = MaximinOPF.MinimaxOPFModel(pm_data, powerform)","category":"page"},{"location":"API/#","page":"API Document","title":"API Document","text":"The sample code uses IEEE 9-bus test system as a input power system. PowerModels parses the system and builds a ParsedPowerSystemModel object. The SOCWRConicPowerModel, which is defined in the PowerModels, option indicates the mathematical form of the model. The MinimaxOPFModel function build a JuMP model that can be solved by mathmatical solvers.","category":"page"}]
}
